应用层

运输层
	多路复用
		通过socket复用/解复用，
		UDP socket二元组标识：每次连接创建一个socket进程。
		TCP socket四元组标识：有一个欢迎进程等待连接，accept后创建新的socket
	⭐️UDP
		不需要握手，高效但不可靠，可校验但不可恢复
		用户数据报协议:源端口号+目的端口+长度+校验和+载荷
			校验和：差错检测-->1.把报文段每16bit分一段。2.每一段想累计相加，溢出进位回卷，最后结果取反码，存在校验和。3.接受方把报文分段再次累加，再加上保存的校验和，显然全为1？correct：fault
			链路层也有差错检测为什么运输层UDP也要检测？
				答：端到端原则，即链路层不是端到端的，链路层不能保证传送过程中所有的链路都提供差错检测，或者在中间路由过程内存中发生比特差错。
				
	⭐️⭐️⭐️可靠数据传输原理    应用层   传输层  链路层 都有
		1.可靠数据传输协议，因为下层不可靠，所以上次要可靠
		2.下层越不可靠，上层越要可靠，越复杂，互补嘛。rdt从简单到复杂：
		rdt1.0： 底层信道完全可靠
			理想状态，协议只需简单收->打包->发即可
			
		rdt2.0： 底层信道有bit差错
			1. 自动重传请求ARQ（Automatic Repeat reQuest）:接收方需要确认是否有误。1有误？2反馈->3重传？
			2.发送端两种状态：1 等待上层调用   2 等待反馈             接收方一种状态：等待下层调用返回ack或nak
			存在的问题：反馈信息如果出错怎么办？
			如果发送放没有识别反馈信息，他后面发的数据分组就会有麻烦，重发？接收方不知道是重发的呀。
				rdt2.1：将数据分组添加序号
				用0  1  两个序号交替发送分组:
					发送端状态：有四种：1 等待0上层调用  2 等待ack0或nak0  3 等待1上层调用   4 等待ack1或nak1
					接收端两种状态：  1 等待下层0的调用  2 等待下层1的调用
				
				rdt2.2：无nak协议：
					简化反馈型号只用ack：正确反馈分组序列ack 如对分组0：正确就发ack0 错误就发ack1
					
		rdt3.0：底层信道有bit差错并且可能丢包		丢包？路由器排队满了，删掉了
			1. 发送方设置一个定时器，无论是 数据包丢失还是ack丢失/错误，超时就重发包。
		
		总结：	至此，已有	检验和	序号	定时器	ack回应        几种技术
			但是rdt3.0还有一个关键问题就是他是	等停协议	发一个等一确认，再发下一个，所以流水线的设计就出来了！
		
		流水线可靠传输协议：	
			无需发一个包，等待确认再发下一个，就像流水线一样，挨个发送多个包，尽量多地利用带宽，等到收到第一个ack确认就发下一批
			为实现这个流程，明显：
				1. 两个标识的包序号不够用了，加序号
				2. 双方需要加缓存，因为发出去一批分组，中间有错误或者丢失还需要重新发。所以引出了	回退N步		和	选择重传方法
		回退N步（GBN）：
			sw > 1	rw = 1
			发送端缓冲滑动窗口有多个数据包，接收端只有一个，发送端连续发送包，接受端给予相应，接到相应，窗口向后移动一个包，但是如果由于接收端只有一个包缓冲区，所以，如果丢包或者错误，发送端需要从错误	
			的包开始重传所窗口里的包
		选择重传（SR）：
			sw > 1	rw > 1
			和GBN的区别就是接收端缓冲区窗口>1所以，接收端对自己窗口里的多个包，每一个包独立回应ack，发送端收到ack，哪个ack超时没收到，单独重发一个包就行了。
	⭐️TCP
		报文结构：
			
		如何估算RTT：
			Sample RTT（样本rtt）
		可靠数据传输：
			gbn和sr都有
			
		流量控制：	收发速度不匹配	利用滑动窗口	接收窗口rwnd
			原理：两端都有自己的rwnd，表示自己缓存中的空闲位置大小（>0），通过tcp响应把rwnd的大小发给对方，对方收到后，控制自己的	已发送-已确认=发送未确认<对方的rwnd就ok了
			死锁解决：避免死锁等待，发送放通过定时发送试探报文，探接受端情况。
			
			
		拥塞控制：	网络交通堵塞	丢包
		
			拥塞窗口cwnd：发送方控制	
			
			慢开始：cwnd	cwnd from 1 指数增加到ssthresh值进入拥塞避免控制
			拥塞控制：	cwnd from ssthresh	线性增加	到网络拥塞	打回慢开始	重新设置ssthresh值
			丢包导致三次冗余ack----》快重传-----》快恢复
			快重传：丢包，三次ack要包，超时前快传
			快恢复：丢包，快重传说明网路阻塞了，cwnd不打回慢开始，从ssthresh值拥塞控制开始
			
			
			
		
		
		
网络层
	数据平面：局部
		
	
	控制平面：全局

链路层

物理层


